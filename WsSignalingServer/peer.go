package main

import (
	"log"
	"sync"
)

// PeerManager —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –ø–∏—Ä–∞–º–∏
type PeerManager struct {
	peers map[string]*Peer
	mutex sync.RWMutex
}

// NewPeerManager —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø–∏—Ä–æ–≤
func NewPeerManager() *PeerManager {
	pm := &PeerManager{
		peers: make(map[string]*Peer),
	}
	log.Printf("üë• PeerManager created")
	return pm
}

// AddPeer –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–∏—Ä–∞
func (pm *PeerManager) AddPeer(peer *Peer) {
	log.Printf("‚ûï PeerManager: Adding peer %s", peer.ID)
	pm.mutex.Lock()
	defer pm.mutex.Unlock()
	pm.peers[peer.ID] = peer
	log.Printf("‚úÖ Peer %s successfully added to peer manager", peer.ID)
	log.Printf("üìä Total peers in manager: %d", len(pm.peers))
}

// RemovePeer —É–¥–∞–ª—è–µ—Ç –ø–∏—Ä–∞
func (pm *PeerManager) RemovePeer(peerID string) {
	log.Printf("‚ûñ PeerManager: Removing peer %s", peerID)
	pm.mutex.Lock()
	defer pm.mutex.Unlock()
	if peer, exists := pm.peers[peerID]; exists {
		log.Printf("üîå Closing connection for peer %s", peerID)
		peer.Conn.Close()
		delete(pm.peers, peerID)
		log.Printf("‚úÖ Peer %s successfully removed from peer manager", peerID)
		log.Printf("üìä Total peers in manager: %d", len(pm.peers))
	} else {
		log.Printf("‚ö†Ô∏è  Peer %s not found in peer manager", peerID)
	}
}

// GetPeer –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∏—Ä–∞ –ø–æ ID
func (pm *PeerManager) GetPeer(peerID string) *Peer {
	pm.mutex.RLock()
	defer pm.mutex.RUnlock()
	return pm.peers[peerID]
}

// GetAllPeers –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ—Ö –ø–∏—Ä–æ–≤
func (pm *PeerManager) GetAllPeers() map[string]*Peer {
	pm.mutex.RLock()
	defer pm.mutex.RUnlock()
	return pm.peers
}
