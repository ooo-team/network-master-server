package main

import (
	"encoding/json"
	"log"
	"net/http"

	"github.com/gorilla/websocket"
)

var upgrader = websocket.Upgrader{
	CheckOrigin: func(r *http.Request) bool {
		return true // –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ origin –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	},
}

// SignalingServer –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç WebSocket signaling —Å–µ—Ä–≤–µ—Ä
type SignalingServer struct {
	peerManager *PeerManager
	roomManager *RoomManager
}

// NewSignalingServer —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π signaling —Å–µ—Ä–≤–µ—Ä
func NewSignalingServer() *SignalingServer {
	return &SignalingServer{
		peerManager: NewPeerManager(),
		roomManager: NewRoomManager(),
	}
}

// handleWebSocket –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
func (s *SignalingServer) handleWebSocket(w http.ResponseWriter, r *http.Request) {
	log.Printf("=== NEW WEBSOCKET CONNECTION ATTEMPT ===")
	log.Printf("Remote address: %s", r.RemoteAddr)
	log.Printf("User agent: %s", r.UserAgent())
	log.Printf("Headers: %v", r.Header)
	
	conn, err := upgrader.Upgrade(w, r, nil)
	if err != nil {
		log.Printf("‚ùå WebSocket upgrade failed: %v", err)
		return
	}
	defer conn.Close()
	log.Printf("‚úÖ WebSocket connection upgraded successfully")

	// –ü–æ–ª—É—á–∞–µ–º peer ID –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
	peerID := r.URL.Query().Get("peer_id")
	if peerID == "" {
		log.Printf("‚ùå No peer_id provided in query parameters")
		log.Printf("Available query params: %v", r.URL.Query())
		return
	}
	log.Printf("üìã Peer ID from query: %s", peerID)

	// –ü–æ–ª—É—á–∞–µ–º room code –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
	roomCode := r.URL.Query().Get("room")
	if roomCode == "" {
		log.Printf("‚ùå No room code provided in query parameters")
		log.Printf("Available query params: %v", r.URL.Query())
		return
	}
	log.Printf("üè† Room code from query: %s", roomCode)

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–∏—Ä–∞
	peer := &Peer{
		ID:   peerID,
		Conn: conn,
	}
	log.Printf("üë§ Created new peer object for: %s", peerID)

	// –î–æ–±–∞–≤–ª—è–µ–º –ø–∏—Ä–∞ –≤ –º–µ–Ω–µ–¥–∂–µ—Ä –∏ –∫–æ–º–Ω–∞—Ç—É
	log.Printf("‚ûï Adding peer %s to peer manager", peerID)
	s.peerManager.AddPeer(peer)
	
	log.Printf("‚ûï Adding peer %s to room %s", peerID, roomCode)
	s.roomManager.AddPeerToRoom(roomCode, peer)

	// –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –ø–∏—Ä–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ –æ –Ω–æ–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–µ
	log.Printf("üì¢ Broadcasting peer_joined message for %s to room %s", peerID, roomCode)
	s.roomManager.BroadcastToRoom(roomCode, SignalMessage{
		Type:    "peer_joined",
		From:    peerID,
		To:      "",
		Payload: json.RawMessage(`{"peer_id": "` + peerID + `"}`),
	}, peerID)

	log.Printf("üîÑ Starting message processing loop for peer %s", peerID)
	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–∏—Ä–∞
	for {
		var msg SignalMessage
		if err := conn.ReadJSON(&msg); err != nil {
			log.Printf("‚ùå Error reading message from peer %s: %v", peerID, err)
			break
		}

		log.Printf("üì® Received message from %s: type=%s, to=%s, payload=%s", peerID, msg.Type, msg.To, string(msg.Payload))
		
		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
		s.handleMessage(peer, msg)
	}

	log.Printf("üîå Peer %s disconnected, cleaning up", peerID)
	// –£–¥–∞–ª—è–µ–º –ø–∏—Ä–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
	s.peerManager.RemovePeer(peerID)
	if peer.RoomCode != "" {
		log.Printf("‚ûñ Removing peer %s from room %s", peerID, peer.RoomCode)
		s.roomManager.RemovePeerFromRoom(peer.RoomCode, peerID)

		// –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –ø–∏—Ä–æ–≤ –æ–± —É—Ö–æ–¥–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
		log.Printf("üì¢ Broadcasting peer_left message for %s to room %s", peerID, peer.RoomCode)
		s.roomManager.BroadcastToRoom(peer.RoomCode, SignalMessage{
			Type:    "peer_left",
			From:    peerID,
			To:      "",
			Payload: json.RawMessage(`{"peer_id": "` + peerID + `"}`),
		}, "")
	}
	log.Printf("‚úÖ Cleanup completed for peer %s", peerID)
}

// handleMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func (s *SignalingServer) handleMessage(peer *Peer, msg SignalMessage) {
	log.Printf("üîç Processing message from %s: type=%s, to=%s, payload=%s", peer.ID, msg.Type, msg.To, string(msg.Payload))

	switch msg.Type {
	case "offer", "answer", "ice_candidate":
		log.Printf("üì§ Processing %s message from %s to %s", msg.Type, peer.ID, msg.To)
		// –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–∏—Ä—É
		if msg.To != "" {
			log.Printf("üéØ Attempting to send %s message to specific peer: %s", msg.Type, msg.To)
			if !s.roomManager.SendToPeer(msg.To, msg) {
				log.Printf("‚ùå Failed to send message to peer %s", msg.To)
			} else {
				log.Printf("‚úÖ Successfully sent %s message to peer %s", msg.Type, msg.To)
			}
		} else {
			log.Printf("‚ö†Ô∏è  Message has empty 'to' field, cannot forward %s message", msg.Type)
		}

	case "join_room":
		log.Printf("üö™ Processing join_room message from %s", peer.ID)
		// –ü–∏—Ä –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ
		var payload struct {
			RoomCode string `json:"room_code"`
		}
		if err := json.Unmarshal(msg.Payload, &payload); err == nil {
			log.Printf("‚ûï Adding peer %s to room %s via join_room message", peer.ID, payload.RoomCode)
			s.roomManager.AddPeerToRoom(payload.RoomCode, peer)
		} else {
			log.Printf("‚ùå Failed to parse join_room payload: %v", err)
		}

	case "leave_room":
		log.Printf("üö™ Processing leave_room message from %s", peer.ID)
		// –ü–∏—Ä –ø–æ–∫–∏–¥–∞–µ—Ç –∫–æ–º–Ω–∞—Ç—É
		if peer.RoomCode != "" {
			log.Printf("‚ûñ Removing peer %s from room %s via leave_room message", peer.ID, peer.RoomCode)
			s.roomManager.RemovePeerFromRoom(peer.RoomCode, peer.ID)
		} else {
			log.Printf("‚ö†Ô∏è  Peer %s tried to leave room but has no room code", peer.ID)
		}

	default:
		log.Printf("‚ùì Unknown message type: %s from peer %s", msg.Type, peer.ID)
	}
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä
func (s *SignalingServer) Start(addr string) error {
	http.HandleFunc("/ws", s.handleWebSocket)

	log.Printf("üöÄ Starting signaling server on %s", addr)
	log.Printf("üì° WebSocket endpoint: ws://localhost%s/ws", addr)
	log.Printf("üìã Usage: ws://localhost%s/ws?peer_id=YOUR_ID&room=ROOM_CODE", addr)
	log.Printf("üîß Server ready to accept connections")
	return http.ListenAndServe(addr, nil)
}
