using UnityEngine;
using NativeWebSocket;
using System;
using System.Collections.Generic;
using System.Text;

/// <summary>
/// –ü–†–û–°–¢–û–ô –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ signaling —Å–µ—Ä–≤–µ—Ä—É
/// –ü–æ–º–æ–≥–∞–µ—Ç –ø–∏—Ä–∞–º –Ω–∞–π—Ç–∏ –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –∏ –æ–±–º–µ–Ω—è—Ç—å—Å—è WebRTC –¥–∞–Ω–Ω—ã–º–∏
/// </summary>
public class SignalingClient : MonoBehaviour
{
     [Header("Server Settings")]
    public string serverUrl = "ws://95.165.133.136:8080/ws";
    public string roomCode = "test_room";
    public string thisPeerID = "unity_client";
    
    // –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    private WebSocket webSocket;
    private bool isConnected = false;
    
    // –°–æ–±—ã—Ç–∏—è - –ø—Ä–æ—Å—Ç–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ
    public event Action<string> OnPeerJoined;           // –ö—Ç–æ-—Ç–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è
    public event Action<string> OnPeerLeft;             // –ö—Ç–æ-—Ç–æ —É—à—ë–ª
    public event Action<SignalingMessage> OnSignalingMessage; // WebRTC —Å–æ–æ–±—â–µ–Ω–∏–µ
    public event Action OnConnected;                    // –ú—ã –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å
    
    // –ü—É–±–ª–∏—á–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
    public string PeerId => thisPeerID;
    public bool IsConnected => isConnected;
    public List<string> PeersInRoom = new();

    void Start()
    {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —ç—Ç–æ–≥–æ –ø–∏—Ä–∞
        thisPeerID = "unity_client_" + UnityEngine.Random.Range(1000, 9999);
        PeersInRoom.Add(thisPeerID);
    }
    
    void Update()
    {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è
        webSocket?.DispatchMessageQueue();
    }
    
    async void OnApplicationQuit()
    {
        await webSocket?.Close();
    }
    
    /// <summary>
    /// –ü–û–î–ö–õ–Æ–ß–ò–¢–¨–°–Ø –∫ signaling —Å–µ—Ä–≤–µ—Ä—É
    /// </summary>
    public async void Connect()
    {
        if (isConnected) return;
        
        Debug.Log($"üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É: {roomCode}");
        
        string url = $"{serverUrl}?peer_id={thisPeerID}&room={roomCode}";
        webSocket = new WebSocket(url);
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è WebSocket
        webSocket.OnOpen += () =>
        {
            Debug.Log("‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ signaling —Å–µ—Ä–≤–µ—Ä—É");
            isConnected = true;
            OnConnected?.Invoke();
        };
        
        webSocket.OnMessage += (bytes) =>
        {
            string message = Encoding.UTF8.GetString(bytes);
            HandleMessage(message);
        };
        
        webSocket.OnError += (error) => Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ WebSocket: {error}");
        
        webSocket.OnClose += (code) =>
        {
            Debug.Log("üö™ –û—Ç–∫–ª—é—á–∏–ª–∏—Å—å –æ—Ç signaling —Å–µ—Ä–≤–µ—Ä–∞");
            isConnected = false;
            PeersInRoom.Clear();
        };
        
        await webSocket.Connect();
    }
    
    /// <summary>
    /// –û–¢–ö–õ–Æ–ß–ò–¢–¨–°–Ø –æ—Ç signaling —Å–µ—Ä–≤–µ—Ä–∞
    /// </summary>
    public async void Disconnect()
    {
        await webSocket?.Close();
    }
    
    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    /// </summary>
    private void HandleMessage(string message)
    {
        try
        {
            var msg = JsonUtility.FromJson<SignalingMessage>(message);
            if (msg == null) return;
            
            Debug.Log($"üì® {msg.type} –æ—Ç {msg.from}");
            
            switch (msg.type)
            {
                case "peer_joined":
                    HandlePeerJoined(msg);
                    break;
                case "peer_left":
                    HandlePeerLeft(msg);
                    break;
                case "offer":
                case "answer":
                case "ice_candidate":
                    OnSignalingMessage?.Invoke(msg); // –ü–µ—Ä–µ–¥–∞—ë–º –≤ WebRTCManager
                    break;
            }
        }
        catch (Exception e)
        {
            Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {e.Message}");
        }
    }
    
    void HandlePeerJoined(SignalingMessage msg)
    {
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–∏—Ä–æ–≤ –∏–∑ payload
        try
        {
            if (!string.IsNullOrEmpty(msg.payload))
            {
                var data = JsonUtility.FromJson<PeerJoinedData>(msg.payload);
                if (data?.all_peers != null)
                {
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–∏—Ä–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ
                    PeersInRoom.Clear();
                    PeersInRoom.Add(thisPeerID); // –°–µ–±—è —Ç–æ–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º
                    
                    foreach (string peerId in data.all_peers)
                    {
                        if (peerId != thisPeerID) PeersInRoom.Add(peerId);
                    }
                    
                    Debug.Log($"üìã –û–±–Ω–æ–≤–∏–ª–∏ —Å–ø–∏—Å–æ–∫ –ø–∏—Ä–æ–≤: {string.Join(", ", PeersInRoom)}");
                }
            }
        }
        catch (Exception e)
        {
            Debug.LogWarning($"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å peer_joined: {e.Message}");
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–∏—Ä–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        if (!PeersInRoom.Contains(msg.from) && msg.from != thisPeerID)
        {
            PeersInRoom.Add(msg.from);
        }
        
        OnPeerJoined?.Invoke(msg.from);
    }
    
    void HandlePeerLeft(SignalingMessage msg)
    {
        if (PeersInRoom.Remove(msg.from))
        {
            Debug.Log($"üö™ {msg.from} –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É");
            OnPeerLeft?.Invoke(msg.from);
        }
    }
    
    /// <summary>
    /// –û–¢–ü–†–ê–í–ò–¢–¨ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ signaling —Å–µ—Ä–≤–µ—Ä
    /// </summary>
    public async void SendMessage(SignalingMessage message)
    {
        if (webSocket != null && isConnected)
        {
            string json = JsonUtility.ToJson(message);
            await webSocket.SendText(json);
        }
    }
} 