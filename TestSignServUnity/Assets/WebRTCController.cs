using UnityEngine;
using UnityEngine.UI;
using TMPro;
using System.Collections.Generic;

/// <summary>
/// –ü–†–û–°–¢–û–ô –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è mesh-—á–∞—Ç–∞
/// –°–æ–µ–¥–∏–Ω—è–µ—Ç UI —Å WebRTC –∏ Signaling
/// </summary>
public class WebRTCController : MonoBehaviour
{
    [Header("üì± UI –≠–ª–µ–º–µ–Ω—Ç—ã")]
    public Button connectButton;        // –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ
    public Button disconnectButton;     // –û—Ç–∫–ª—é—á–∏—Ç—å—Å—è
    public TMP_InputField roomInput;    // –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
    public TextMeshProUGUI statusText;  // –°—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    public TextMeshProUGUI peerListText;// –°–ø–∏—Å–æ–∫ –ø–∏—Ä–æ–≤
    public TMP_InputField messageInput; // –í–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è
    public Button sendMessageButton;    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    public TextMeshProUGUI messagesText;// –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    
    // –ù–∞—à–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    private SignalingClient signaling;
    private WebRTCManager webrtc;
    
    // –°–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
    private readonly List<string> messages = new();

    void Start()
    {
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (–∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –µ—Å–ª–∏ –Ω–µ—Ç)
        signaling = GetComponent<SignalingClient>() ?? gameObject.AddComponent<SignalingClient>();
        webrtc = GetComponent<WebRTCManager>() ?? gameObject.AddComponent<WebRTCManager>();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
        connectButton?.onClick.AddListener(() => ConnectToRoom());
        disconnectButton?.onClick.AddListener(() => DisconnectFromRoom());
        sendMessageButton?.onClick.AddListener(() => SendMessage());
        
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
        signaling.OnPeerJoined += WhenPeerJoined;
        signaling.OnPeerLeft += WhenPeerLeft;
        signaling.OnSignalingMessage += webrtc.HandleSignalingMessage;
        signaling.OnConnected += WhenConnectedToSignaling;
        
        webrtc.OnMessageReceived += WhenMessageReceived;
        webrtc.OnPeerConnected += WhenPeerConnected;
        webrtc.OnPeerDisconnected += WhenPeerDisconnected;
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ UI
        UpdateUI();
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if (roomInput != null) roomInput.text = signaling.roomCode;
    }

    // === –ü–†–û–°–¢–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –ö–ù–û–ü–û–ö ===
    
    void ConnectToRoom()
    {
        if (roomInput != null) signaling.roomCode = roomInput.text;
        signaling.Connect();
        UpdateUI();
    }
    
    void DisconnectFromRoom()
    {
        webrtc.DisconnectAll();
        signaling.Disconnect();
        UpdateUI();
    }
    
    void SendMessage()
    {
        if (messageInput != null && !string.IsNullOrEmpty(messageInput.text))
        {
            string msg = messageInput.text;
            AddMessage($"–Ø: {msg}");
            messageInput.text = "";
            webrtc.BroadcastMessage(msg);
        }
    }

    // === –ü–†–û–°–¢–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô ===
    
    void WhenPeerJoined(string peerId)
    {
        // –¢–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–∏—Ä–æ–≤, –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
        UpdatePeerList();
        ConnectToAllPeers(); // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫–æ –≤—Å–µ–º –ø–∏—Ä–∞–º –≤ –∫–æ–º–Ω–∞—Ç–µ
    }
    
    void WhenPeerLeft(string peerId)
    {
        // –¢–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–∏—Ä–æ–≤, –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
        webrtc.DisconnectPeer(peerId);
        UpdatePeerList();
    }
    
    void WhenConnectedToSignaling()
    {
        // –¢–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–∏—Ä–æ–≤, –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
        UpdatePeerList();
        ConnectToAllPeers(); // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–∏—Ä–∞–º
    }
    
    void WhenMessageReceived(string fromPeer, string message)
    {
        // –≠–¢–û –æ—Å—Ç–∞–µ—Ç—Å—è –≤ —á–∞—Ç–µ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        AddMessage($"{fromPeer}: {message}");
    }
    
    void WhenPeerConnected(string peerId)
    {
        // –¢–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–∏—Ä–æ–≤, –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
        UpdatePeerList();
    }
    
    void WhenPeerDisconnected(string peerId)
    {
        // –¢–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–∏—Ä–æ–≤, –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
        UpdatePeerList();
    }
    
    /// <summary>
    /// –ì–õ–ê–í–ù–´–ô –ú–ï–¢–û–î: –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫–æ –≤—Å–µ–º –ø–∏—Ä–∞–º –≤ –∫–æ–º–Ω–∞—Ç–µ
    /// </summary>
    void ConnectToAllPeers()
    {
        if (signaling != null && signaling.IsConnected)
        {
            webrtc.ConnectToAllPeers(signaling.PeersInRoom, signaling.PeerId);
        }
    }

    // === –ü–†–û–°–¢–´–ï –ú–ï–¢–û–î–´ UI ===
    
    void UpdatePeerList()
    {
        if (peerListText == null) return;
        
        var lines = new List<string>();
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–±—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ signaling
        if (signaling?.IsConnected == true)
        {
            lines.Add($"üì± {signaling.PeerId} (–Ø)");
            lines.Add($"üåê Signaling: WebSocket OK");
            lines.Add(""); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –ø–∏—Ä–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        if (signaling?.PeersInRoom != null)
        {
            foreach (string peerId in signaling.PeersInRoom)
            {
                if (peerId != signaling.PeerId)
                {
                    lines.Add($"üë§ {peerId}");
                    
                    if (webrtc.IsConnectedToPeer(peerId))
                    {
                        lines.Add("  üîó WebRTC: ‚úÖ Connected");
                        // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
                        string connectionInfo = webrtc.GetConnectionDetails(peerId);
                        if (!string.IsNullOrEmpty(connectionInfo))
                        {
                            var details = connectionInfo.Split(',');
                            foreach (var detail in details)
                            {
                                lines.Add($"  {detail.Trim()}");
                            }
                        }
                    }
                    else
                    {
                        lines.Add("  üîó WebRTC: ‚è≥ Connecting...");
                    }
                    lines.Add(""); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –ø–∏—Ä–∞–º–∏
                }
            }
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
        if (lines.Count == 0)
        {
            peerListText.text = "üè† –ù–∏–∫–æ–≥–æ –Ω–µ—Ç –≤ –∫–æ–º–Ω–∞—Ç–µ\n\n–ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤";
        }
        else
        {
            peerListText.text = string.Join("\n", lines);
        }
    }
    
    void AddMessage(string message)
    {
        messages.Add(message);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
        if (messages.Count > 50) messages.RemoveAt(0);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        if (messagesText != null)
        {
            messagesText.text = string.Join("\n", messages);
        }
    }

    void UpdateUI()
    {
        bool connected = signaling?.IsConnected == true;
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        if (connectButton != null) connectButton.interactable = !connected;
        if (disconnectButton != null) disconnectButton.interactable = connected;
        if (roomInput != null) roomInput.interactable = !connected;
        
        // –°—Ç–∞—Ç—É—Å
        if (statusText != null)
        {
            if (connected)
            {
                int connectedPeers = webrtc.ConnectedPeersCount;
                int totalPeers = (signaling.PeersInRoom?.Count ?? 1) - 1;
                statusText.text = $"üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω - Mesh: {connectedPeers}/{totalPeers}";
            }
            else
            {
                statusText.text = "üî¥ –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω";
            }
        }
    }
    
    void Update()
    {
        UpdateUI(); // –û–±–Ω–æ–≤–ª—è–µ–º UI –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä
    }

    void OnDestroy()
    {
        // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏–π
        if (signaling != null)
        {
            signaling.OnPeerJoined -= WhenPeerJoined;
            signaling.OnPeerLeft -= WhenPeerLeft;
            signaling.OnSignalingMessage -= webrtc.HandleSignalingMessage;
            signaling.OnConnected -= WhenConnectedToSignaling;
        }
        
        if (webrtc != null)
        {
            webrtc.OnMessageReceived -= WhenMessageReceived;
            webrtc.OnPeerConnected -= WhenPeerConnected;
            webrtc.OnPeerDisconnected -= WhenPeerDisconnected;
        }
    }
} 