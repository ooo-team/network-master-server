using UnityEngine;
using Unity.WebRTC;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.Linq;

/// <summary>
/// –ü–†–û–°–¢–û–ô –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤ mesh-—Å–µ—Ç–∏
/// –ö–∞–∂–¥—ã–π –ø–∏—Ä = –æ–¥–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ. –í—Å—ë –ø—Ä–æ—Å—Ç–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ!
/// </summary>
public class WebRTCManager : MonoBehaviour
{
    [Header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ WebRTC")]
    public RTCConfiguration rtcConfig = new() {
        iceServers = new[]
        {
            new RTCIceServer { urls = new[] { "stun:stun.l.google.com:19302" } },
            new RTCIceServer
            {
                urls = new[] { "turn:global.relay.metered.ca:443" },
                username = "b7adc85b4cf785c04869754c",
                credential = "ZZ3Ln89FzaDMrF5n"
            }
        }   
    };

    // –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ø–∏—Ä–æ–º
    private class PeerConnection
    {
        public RTCPeerConnection webrtc;     // –°–∞–º–æ WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        public RTCDataChannel dataChannel;  // –ö–∞–Ω–∞–ª –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
        public bool isConnected = false;    // –ì–æ—Ç–æ–≤–æ –ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        public string connectionType = "üîç Detecting..."; // –¢–∏–ø —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (STUN/TURN/Direct)
        public int candidatesReceived = 0;   // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        
        public PeerConnection()
        {
            // –í—Å—ë —Å–æ–∑–¥–∞—ë–º —Å—Ä–∞–∑—É –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ - –ø—Ä–æ—â–µ –ø–æ–Ω—è—Ç—å
        }
    }

    // –í—Å–µ –Ω–∞—à–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ID –ø–∏—Ä–∞ ‚Üí —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    private Dictionary<string, PeerConnection> connections = new Dictionary<string, PeerConnection>();
    
    // –°—Å—ã–ª–∫–∞ –Ω–∞ signaling –∫–ª–∏–µ–Ω—Ç (–¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ offer/answer)
    private SignalingClient signaling;
    
    // –°–æ–±—ã—Ç–∏—è - –ø—Ä–æ—Å—Ç–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ
    public event Action<string, string> OnMessageReceived;  // (–æ—Ç –∫–æ–≥–æ, —Å–æ–æ–±—â–µ–Ω–∏–µ)
    public event Action<string> OnPeerConnected;            // (ID –ø–∏—Ä–∞)
    public event Action<string> OnPeerDisconnected;         // (ID –ø–∏—Ä–∞)

    void Start()
    {
        signaling = GetComponent<SignalingClient>();
    }
    
    /// <summary>
    /// –ì–õ–ê–í–ù–´–ô –ú–ï–¢–û–î: –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫–æ –≤—Å–µ–º –ø–∏—Ä–∞–º –≤ –∫–æ–º–Ω–∞—Ç–µ
    /// –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–∏–ª–∏ —Å–ø–∏—Å–æ–∫ –ø–∏—Ä–æ–≤
    /// </summary>
    public void ConnectToAllPeers(List<string> peerIds, string myId)
    {
        Debug.Log($"üîó ConnectToAllPeers called. My ID: {myId}, Peers: [{string.Join(", ", peerIds)}]");
        Debug.Log($"üîó Current connections: [{string.Join(", ", connections.Keys)}]");
        
        foreach (string peerId in peerIds)
        {
            if (peerId != myId)
            {
                if (connections.ContainsKey(peerId))
                {
                    Debug.Log($"‚è≠Ô∏è Already have connection to {peerId}, skipping");
                    continue;
                }
                
                // –ö—Ç–æ –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–æ–º? –¢–æ—Ç, —É –∫–æ–≥–æ ID –º–µ–Ω—å—à–µ –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏
                // –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Å–æ–∑–¥–∞—Å—Ç offer
                bool iAmInitiator = string.Compare(myId, peerId) < 0;
                Debug.Log($"ü§ù {myId} vs {peerId}: I am {(iAmInitiator ? "INITIATOR" : "RECEIVER")} (compare result: {string.Compare(myId, peerId)})");
                CreateConnectionToPeer(peerId, iAmInitiator);
            }
            else
            {
                Debug.Log($"‚è≠Ô∏è Skipping myself: {peerId}");
            }
        }
    }
    
    /// <summary>
    /// –°–æ–∑–¥–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –æ–¥–Ω–∏–º –ø–∏—Ä–æ–º
    /// </summary>
    private void CreateConnectionToPeer(string peerId, bool iAmInitiator)
    {
        Debug.Log($"Connecting to {peerId} (I am {(iAmInitiator ? "initiator" : "receiver")})");
        
        var peer = new PeerConnection();
        connections[peerId] = peer;
        
        // –°–æ–∑–¥–∞—ë–º WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        peer.webrtc = new RTCPeerConnection(ref rtcConfig);
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        peer.webrtc.OnIceCandidate = candidate => SendIceCandidate(peerId, candidate);
        peer.webrtc.OnDataChannel = channel => SetupDataChannel(peerId, channel);
        
        if (iAmInitiator)
        {
            // –Ø –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä - —Å–æ–∑–¥–∞—é –∫–∞–Ω–∞–ª –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é offer
            peer.dataChannel = peer.webrtc.CreateDataChannel("messages");
            SetupDataChannel(peerId, peer.dataChannel);
            StartCoroutine(SendOffer(peerId));
        }
    }

    /// <summary>
    /// –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–∏—Ä–æ–º
    /// </summary>
    private void SetupDataChannel(string peerId, RTCDataChannel channel)
    {
        if (!connections.ContainsKey(peerId))
        {
            Debug.LogError($"‚ùå No peer connection found for {peerId} when setting up data channel");
            return;
        }

        connections[peerId].dataChannel = channel;
        
        Debug.Log($"üîß Setting up data channel for {peerId} (ReadyState: {channel.ReadyState})");
        
        // –ö–æ–≥–¥–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
        channel.OnMessage = bytes =>
        {
            string message = Encoding.UTF8.GetString(bytes);
            Debug.Log($"üì® Message from {peerId}: {message}");
            OnMessageReceived?.Invoke(peerId, message);
        };
        
        // –ö–æ–≥–¥–∞ –∫–∞–Ω–∞–ª –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è - —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!
        channel.OnOpen += () =>
        {
            connections[peerId].isConnected = true;
            Debug.Log($"‚úÖ Data channel OPENED for {peerId} - connection ready!");
            OnPeerConnected?.Invoke(peerId);
        };
        
        // –ö–æ–≥–¥–∞ –∫–∞–Ω–∞–ª –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è
        channel.OnClose += () =>
        {
            connections[peerId].isConnected = false;
            Debug.Log($"‚ùå Data channel CLOSED for {peerId}");
            OnPeerDisconnected?.Invoke(peerId);
        };
        
        // –ï—Å–ª–∏ –∫–∞–Ω–∞–ª —É–∂–µ –æ—Ç–∫—Ä—ã—Ç (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–ª—É—á–∞—è—Ö)
        if (channel.ReadyState == RTCDataChannelState.Open)
        {
            connections[peerId].isConnected = true;
            Debug.Log($"‚úÖ Data channel already OPEN for {peerId}");
            OnPeerConnected?.Invoke(peerId);
        }
    }


    /// <summary>
    /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å offer –ø–∏—Ä—É (—è –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä)
    /// </summary>
    private IEnumerator SendOffer(string peerId)
    {
        Debug.Log($"üöÄ Creating offer for {peerId}...");
        
        if (!connections.ContainsKey(peerId))
        {
            Debug.LogError($"‚ùå No connection found for {peerId} when sending offer");
            yield break;
        }
        
        var peer = connections[peerId];
        var offer = peer.webrtc.CreateOffer();
        yield return offer;
        
        if (!offer.IsError)
        {
            var desc = offer.Desc;
            var setLocalResult = peer.webrtc.SetLocalDescription(ref desc);
            yield return setLocalResult;
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º offer —á–µ—Ä–µ–∑ signaling
            signaling.SendMessage(new SignalingMessage
            {
                type = "offer",
                from = signaling.PeerId,
                to = peerId,
                payload = desc.sdp
            });
            
            Debug.Log($"üì§ Sent offer to {peerId} (SDP length: {desc.sdp.Length})");
        }
        else
        {
            Debug.LogError($"‚ùå Failed to create offer for {peerId}: {offer.Error}");
        }
    }

    /// <summary>
    /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å ICE –∫–∞–Ω–¥–∏–¥–∞—Ç
    /// </summary>
    private void SendIceCandidate(string peerId, RTCIceCandidate candidate)
    {
        signaling.SendMessage(new SignalingMessage
        {
            type = "ice_candidate",
            from = signaling.PeerId,
            to = peerId,
            payload = candidate.Candidate
        });
    }

    /// <summary>
    /// –ì–õ–ê–í–ù–´–ô –ú–ï–¢–û–î: –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç signaling —Å–µ—Ä–≤–µ—Ä–∞
    /// </summary>
    public void HandleSignalingMessage(SignalingMessage msg)
    {
        Debug.Log($"üì® Got {msg.type} from {msg.from}");
        
        switch (msg.type)
        {
            case "offer":
                StartCoroutine(HandleOffer(msg.from, msg.payload));
                break;
            case "answer":
                StartCoroutine(HandleAnswer(msg.from, msg.payload));
                break;
            case "ice_candidate":
                HandleIceCandidate(msg.from, msg.payload);
                break;
        }
    }

    /// <summary>
    /// –ö–†–ò–¢–ò–ß–ù–û: –û–±—Ä–∞–±–æ—Ç–∞—Ç—å ICE candidate
    /// –ë–µ–∑ —ç—Ç–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è!
    /// </summary>
    private void HandleIceCandidate(string fromPeerId, string candidateString)
    {
        if (!connections.ContainsKey(fromPeerId))
        {
            Debug.LogWarning($"‚ö†Ô∏è ICE candidate from unknown peer {fromPeerId}");
            return;
        }
        
        try
        {
            var peer = connections[fromPeerId];
            if (peer.webrtc != null)
            {
                var candidate = new RTCIceCandidate(new RTCIceCandidateInit
                {
                    candidate = candidateString,
                    sdpMid = "0",
                    sdpMLineIndex = 0
                });
                
                peer.webrtc.AddIceCandidate(candidate);
                peer.candidatesReceived++;
                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç—É
                DetectConnectionType(peer, candidateString);
                
                Debug.Log($"üßä Added ICE candidate #{peer.candidatesReceived} from {fromPeerId} ({peer.connectionType})");
            }
        }
        catch (System.Exception e)
        {
            Debug.LogError($"‚ùå Failed to add ICE candidate from {fromPeerId}: {e}");
        }
    }
    
    /// <summary>
    /// –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç—É
    /// </summary>
    private void DetectConnectionType(PeerConnection peer, string candidateString)
    {
        if (candidateString.Contains("typ host"))
        {
            peer.connectionType = "üè† Direct (LAN)";
        }
        else if (candidateString.Contains("typ srflx"))
        {
            peer.connectionType = "üåê STUN (P2P)";
        }
        else if (candidateString.Contains("typ relay"))
        {
            peer.connectionType = "üîÑ TURN (Relay)";
        }
        else if (candidateString.Contains("typ prflx"))
        {
            peer.connectionType = "üîç Peer Reflexive";
        }
        else
        {
            peer.connectionType = "‚ùì Unknown";
        }
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏–ª–∏ offer –æ—Ç –ø–∏—Ä–∞ - –æ—Ç–≤–µ—á–∞–µ–º answer
    /// </summary>
    private IEnumerator HandleOffer(string fromPeerId, string sdp)
    {
        Debug.Log($"üì• Handling offer from {fromPeerId}");
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–ª–∂–Ω—ã –ª–∏ –ú–´ –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–æ–º
        bool iShouldBeInitiator = string.Compare(signaling.PeerId, fromPeerId) < 0;
        if (iShouldBeInitiator)
        {
            Debug.LogWarning($"‚ö†Ô∏è Received offer from {fromPeerId}, but I should be initiator! Ignoring.");
            yield break;
        }
        
        // –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–µ—Ç - —Å–æ–∑–¥–∞—ë–º (—è –ø–æ–ª—É—á–∞—Ç–µ–ª—å)
        if (!connections.ContainsKey(fromPeerId))
        {
            CreateConnectionToPeer(fromPeerId, false);
        }
        
        var peer = connections[fromPeerId];
        if (peer?.webrtc == null)
        {
            Debug.LogError($"‚ùå No WebRTC connection for {fromPeerId}");
            yield break;
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π offer –∫–∞–∫ remote description
        var desc = new RTCSessionDescription { type = RTCSdpType.Offer, sdp = sdp };
        var setRemoteOp = peer.webrtc.SetRemoteDescription(ref desc);
        yield return setRemoteOp;
        
        // –°–æ–∑–¥–∞—ë–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º answer
        var answer = peer.webrtc.CreateAnswer();
        yield return answer;
        
        if (!answer.IsError)
        {
            var answerDesc = answer.Desc;
            var setLocalOp = peer.webrtc.SetLocalDescription(ref answerDesc);
            yield return setLocalOp;
            
            signaling.SendMessage(new SignalingMessage
            {
                type = "answer",
                from = signaling.PeerId,
                to = fromPeerId,
                payload = answerDesc.sdp
            });
            
            Debug.Log($"üì§ Sent answer to {fromPeerId}");
        }
        else
        {
            Debug.LogError($"‚ùå Failed to create answer for {fromPeerId}: {answer.Error}");
        }
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏–ª–∏ answer –æ—Ç –ø–∏—Ä–∞ - —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ!
    /// </summary>
    private IEnumerator HandleAnswer(string fromPeerId, string sdp)
    {
        Debug.Log($"üì• Handling answer from {fromPeerId}");
        
        if (!connections.ContainsKey(fromPeerId))
        {
            Debug.LogWarning($"‚ö†Ô∏è Received answer from unknown peer {fromPeerId}");
            yield break;
        }
        
        var peer = connections[fromPeerId];
        if (peer?.webrtc == null)
        {
            Debug.LogError($"‚ùå No WebRTC connection for {fromPeerId}");
            yield break;
        }
        
        var desc = new RTCSessionDescription { type = RTCSdpType.Answer, sdp = sdp };
        var setRemoteOp = peer.webrtc.SetRemoteDescription(ref desc);
        yield return setRemoteOp;
        
        Debug.Log($"‚úÖ Answer processed for {fromPeerId}");
    }

    /// <summary>
    /// –û–¢–ü–†–ê–í–ò–¢–¨ –°–û–û–ë–©–ï–ù–ò–ï –í–°–ï–ú –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –ø–∏—Ä–∞–º
    /// </summary>
    public new void BroadcastMessage(string message)
    {
        byte[] data = Encoding.UTF8.GetBytes(message);
        int sent = 0;
        
        Debug.Log($"üì¢ Broadcasting message: '{message}' to {connections.Count} total connections");
        
        foreach (var kvp in connections)
        {
            string peerId = kvp.Key;
            var conn = kvp.Value;
            
            Debug.Log($"  üìã Peer {peerId}: connected={conn.isConnected}, dataChannel={conn.dataChannel != null}, channelState={conn.dataChannel?.ReadyState}");
            
            if (conn.isConnected && conn.dataChannel != null && conn.dataChannel.ReadyState == RTCDataChannelState.Open)
            {
                try
                {
                    conn.dataChannel.Send(data);
                    sent++;
                    Debug.Log($"  ‚úÖ Sent to {peerId}");
                }
                catch (System.Exception e)
                {
                    Debug.LogError($"  ‚ùå Failed to send to {peerId}: {e.Message}");
                }
            }
            else
            {
                Debug.Log($"  ‚è≠Ô∏è Skipped {peerId} - not ready for sending");
            }
        }
        
        Debug.Log($"üì¢ Broadcasted to {sent}/{connections.Count} peers: {message}");
    }
    
    /// <summary>
    /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–∏—Ä—É
    /// </summary>
    public void SendMessageToPeer(string peerId, string message)
    {
        if (connections.TryGetValue(peerId, out var conn) && conn.isConnected)
        {
            byte[] data = Encoding.UTF8.GetBytes(message);
            conn.dataChannel.Send(data);
            Debug.Log($"üì§ Sent to {peerId}: {message}");
        }
        else
        {
            Debug.LogWarning($"‚ùå Can't send to {peerId} - not connected");
        }
    }

    /// <summary>
    /// –û—Ç–∫–ª—é—á–∏—Ç—å –ø–∏—Ä–∞ (–∫–æ–≥–¥–∞ –æ–Ω –ø–æ–∫–∏–¥–∞–µ—Ç –∫–æ–º–Ω–∞—Ç—É)
    /// </summary>
    public void DisconnectPeer(string peerId)
    {
        if (connections.TryGetValue(peerId, out var conn))
        {
            conn.webrtc?.Close();
            conn.webrtc?.Dispose();
            connections.Remove(peerId);
            Debug.Log($"üö™ Disconnected from {peerId}");
        }
    }
    
    /// <summary>
    /// –ó–∞–∫—Ä—ã—Ç—å –í–°–ï —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    /// </summary>
    public void DisconnectAll()
    {
        foreach (var conn in connections.Values)
        {
            conn.webrtc?.Close();
            conn.webrtc?.Dispose();
        }
        connections.Clear();
        Debug.Log("üö™ Disconnected from all peers");
    }
    
    // === –ü–†–û–°–¢–´–ï UTILITY –ú–ï–¢–û–î–´ ===
    
    public int ConnectedPeersCount => connections.Count(c => c.Value.isConnected);
    public List<string> ConnectedPeerIds => connections.Where(c => c.Value.isConnected).Select(c => c.Key).ToList();
    public bool IsConnectedToPeer(string peerId) => connections.TryGetValue(peerId, out var c) && c.isConnected;
    
    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ —Å –ø–∏—Ä–æ–º
    /// </summary>
    public string GetConnectionDetails(string peerId)
    {
        if (!connections.TryGetValue(peerId, out var conn) || conn.webrtc == null)
            return "";
            
        var details = new List<string>();
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        var connState = conn.webrtc.ConnectionState;
        var iceState = conn.webrtc.IceConnectionState;
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–∏–ø —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        details.Add($"üì° {conn.connectionType}");
        details.Add($"üîå ICE: {GetIceStateIcon(iceState)} {iceState}");
        details.Add($"‚ö° Conn: {GetConnStateIcon(connState)} {connState}");
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (conn.candidatesReceived > 0)
        {
            details.Add($"üßä Candidates: {conn.candidatesReceived}");
        }
        
        return string.Join(", ", details);
    }
    
    private string GetIceStateIcon(Unity.WebRTC.RTCIceConnectionState state)
    {
        return state switch
        {
            Unity.WebRTC.RTCIceConnectionState.Connected => "‚úÖ",
            Unity.WebRTC.RTCIceConnectionState.Completed => "‚úÖ",
            Unity.WebRTC.RTCIceConnectionState.Checking => "‚è≥",
            Unity.WebRTC.RTCIceConnectionState.New => "üÜï",
            Unity.WebRTC.RTCIceConnectionState.Disconnected => "‚ùå",
            Unity.WebRTC.RTCIceConnectionState.Failed => "üí•",
            Unity.WebRTC.RTCIceConnectionState.Closed => "üö™",
            _ => "‚ùì"
        };
    }
    
    private string GetConnStateIcon(Unity.WebRTC.RTCPeerConnectionState state)
    {
        return state switch
        {
            Unity.WebRTC.RTCPeerConnectionState.Connected => "‚úÖ",
            Unity.WebRTC.RTCPeerConnectionState.Connecting => "‚è≥",
            Unity.WebRTC.RTCPeerConnectionState.New => "üÜï",
            Unity.WebRTC.RTCPeerConnectionState.Disconnected => "‚ùå",
            Unity.WebRTC.RTCPeerConnectionState.Failed => "üí•",
            Unity.WebRTC.RTCPeerConnectionState.Closed => "üö™",
            _ => "‚ùì"
        };
    }
    
    // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
    public void SendMsg(string message) => BroadcastMessage(message);
    public int GetActiveConnectionsCount() => ConnectedPeersCount;
    public bool IsPeerConnected(string peerId) => IsConnectedToPeer(peerId);

    void OnDestroy()
    {
        DisconnectAll();
    }
} 